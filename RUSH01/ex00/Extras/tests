
/*int	main(int argc, char **argv)
{
        int     tab[16] = {0};
        int     i;

        i = 0;        
        while (*argv)
        {
                if (*argv >= '0' && *argv <= '9')
                {
                        tab =  *argv[i + 1] - '0';
                        putchar(tab);
                        i++;
                }
        }
}*/

/*
int main(int argc, char *argv[])
{
	int grid[4][4] = {
		{0, 0, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
		{0, 0, 0, 0},
	};
	int *pattern;

	if (check_arguments(argc, argv) == 1)
	{
		ft_putstr("Error\n");
		return (0);
	}
	pattern = convert_pattern(argv[1]);
	if (!pattern)
		return (1);
	if (puzzle_solver(grid, pattern, 0) == 1)
	{
		print_puzzle_grid(grid);
	}
	else
	{
		ft_putstr("Error\n");
	}
	return (0);
}
int check_arguments(int argc, char *argv[])
{
	int		i;
	int		j;
	char	*str;

	i = 0;
	if (argc != 2)
		return (1);
	str = argv[0];
	if (ft_strlen(argv[1]) != 31)
		return (1);
	while (str != '\0')
	{
		if (str >= '0' && str <= '9')
		{
			j = ft_atoi(str + i);
			if (j < 0 || j > 4)
				return (0);
		}
		i++;
	}
	return (0);
}


int	main(int argc, char **argv)
{
	int	i;
	int	arr[4][4];
	int	attr[3];

	if (argc == 2)
	{
		i = -1;
		while (i++ < 3)
			attr = 0;
		arr[3][3] = -1;
		if (input_to_arr(argv[1], attr, arr) == 1)
			return (0);
		if (arr[3][3] == -1)
			write(1, "Error", 5);
		if (arr[3][3] == -1)
			return (0);
		solve(arr);
	}
	else
		write(1, "Error", 5);
	return (0);
}
*/
void	first_cond(int tab[4][4], int data[16])
{
	int		i;
	int 	j;

        j = 0;
        while (j < 4)
        {
	        i = 0;
            while (i < 4)
            {
				if ()
            }
            ft_putchar('\n');
            i++;
        }
}

// POV position
// 1 = top
// 2 = bottom
// 3 = left
// 4 = right
int    **generate_pov(int pov, int index)
{
    int    **tbl;
    int    i;

    tbl = malloc(sizeof(int *) * TABLE_LENGHT);
    if (!tbl)
        return (NULL);
    i = -1;
    while (i++ < TABLE_LENGHT)
    {
        if (pov == 1)
            tbl = &g_map[(TABLE_LENGHT * i) + index];
        else if (pov == 2)
            tbl = &g_map[(TABLE_LENGHT * (TABLE_LENGHT - i - 1)) + index];
        else if (pov == 3)
            tbl = &g_map[i + (TABLE_LENGHT * index)];
        else if (pov == 4)
            tbl = &g_map[(TABLE_LENGHT - i - 1) + (TABLE_LENGHT * index)];
    }
    return (tbl);
}

void	inc_asign(int grid[4][4], int constant, int roworcolumn, int inc_or_dec)
{
	int	z;

	if (inc_or_dec == 0)
	{
		z = -1;
		while (++z < 4)
		{
			if (roworcolumn == 0)
				grid[constant][z] = z + 1;
			else
				grid[z][constant] = z + 1;
		}
	}
	else
	{
		z = 4;
		while (--z > -1)
		{
			if (roworcolumn == 0)
				grid[constant][z] = 4 - z;
			else
				grid[z][constant] = 4 - z;
		}
	}
}

void	asign_one(int grid[4][4], int i, int j)
{
	if (i == 0)
		grid[0][j] = 4;
	else if (i == 1)
		grid[3][j] = 4;
	else if (i == 2)
		grid[j][0] = 4;
	else
		grid[j][3] = 4;
}

void	asign(int grid[4][4], int *i, int *j, int arr[4][4])
{
	int	z;

	z = -1;
	if (arr[*i][*j] == 1)
		asign_one(grid, *i, *j);
	else if (*i == 0)
		inc_asign(grid, *j, 1, 0);
	else if (*i == 1)
		inc_asign(grid, *j, 1, 1);
	else if (*i == 2)
		inc_asign(grid, *j, 0, 0);
	else
		inc_asign(grid, *j, 0, 1);
}

void	init_grid(int arr[4][4], int grid[4][4])
{
	int	i;
	int	j;

	i = -1;
	while (++i < 4)
	{
		j = -1;
		while (++j < 4)
		{
			if (arr[j] == 4 || arr[j] == 1)
			{
				asign(grid, &i, &j, arr);
			}
		}
	}
}
void	print_criteria(int arr[4][4])
{
	int		i;
	int		j;
	char	ans;

	i = -1;
	while (++i < 4)
	{
		j = -1;
		while (++j < 3)
		{
			ans = arr[j] + 48;
			write(1, &ans, 1);
			write(1, " ", 1);
		}
		ans = arr[j] + 48;
		write(1, &ans, 1);
		write(1, "\n", 1);
	}
}

int ft_strcmp(char s1)
{
     int        i;
     int        j;

     j = 0;
     while (i < 4 && j < 4)
     {
             while (j < 3)
             {
                     if (s1[j] == s1[j + 1])
                             return (1);
                     while (j < 2)
                     {
                             if (s1[j] == s1[j + 2])
                                     return (2);
                             while (j < 1)
                             {
                                     if (s1[j] == s1[j + 3])
                                             return (3);
                             }
                     }
                     j++;
             }
     }
     return (0);
}

/*
#include <unistd.h>

int     mtab(void)
{
        char    tab[4][4];
        char    ptab[16];
        int     i;
        int     j;
        int     a;
        int     c;

        a = 0;
        c = 1;
        i = 0;
        j = 0;
        while (i < 4 && j < 4)
        {

                while (j < 4)
                {
                        if (ptab[a] == 4 && ptab[a + 4] >  1)
                        {
                                if (ptab[a + 8] == 4 && ptab[a + 12] > 1)
                                                {
                                                        while (i < 4)
                                                        {
                                                                write(1, c, 1);
                                                                c++;
                                                                i++;
                                                        }
                                                        while (j < 4)
                                                        {
                                                                write(1, c, 1);
                                                                c++;
                                                                j++;
                                                        }
                                                        j = 0;
                                                }
                        }
                }
        }
        return (0);
}
*/
/*int pov_row(int *data, int **tab)
{
	int		pov;
	int		i;
	int 	row[4];

	i = 0;
	pov = 0;
	if (data[i] != '\0')
	{
		data[i] / 4 + 1 = pov;
		i++;
	}
	if (tab[][])
	return (pov, row)
}
*/